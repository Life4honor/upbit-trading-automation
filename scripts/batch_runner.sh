#!/bin/bash
#
# Î∞∞Ïπò Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏ (Î∞±ÌÖåÏä§Ìä∏/Ïã§Í±∞Îûò)
# Î≥µÏàò ÏΩîÏù∏Ïóê ÎåÄÌï¥ ÎπÑÎèôÍ∏∞ Î≥ëÎ†¨ Ïã§Ìñâ + Ï†ÑÎûµ ÎπÑÍµê Î™®Îìú
#
# ÏÇ¨Ïö©Î≤ï:
#   ./scripts/batch_runner.sh backtest [preset] [days] [market]     # Î∞±ÌÖåÏä§Ìä∏ Î™®Îìú
#   ./scripts/batch_runner.sh compare [days] [market]               # Ï†ÑÎûµ ÎπÑÍµê Î™®Îìú
#   ./scripts/batch_runner.sh live [preset] [amount] [market]       # Ïã§Í±∞Îûò Î™®Îìú
#
# ÏòàÏãú:
#   ./scripts/batch_runner.sh backtest bollinger-reversal 30 KRW-BTC  # Îã®Ïùº ÏΩîÏù∏
#   ./scripts/batch_runner.sh backtest bollinger-reversal 30          # Î™®Îì† ÏΩîÏù∏ (BTC, ETH)
#   ./scripts/batch_runner.sh compare 30
#   ./scripts/batch_runner.sh live grid-trading 100000 KRW-BTC
#

set -e

# ==========================================
# ÏÑ§Ï†ï
# ==========================================

# Ïã§Ìñâ Î™®Îìú (backtest, compare, ÎòêÎäî live)
MODE="${1:-backtest}"

# Í∏∞Î≥∏ ÎåÄÏÉÅ ÏΩîÏù∏
DEFAULT_MARKETS=("KRW-BTC" "KRW-ETH")

# ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ï†ÑÎûµ Î™©Î°ù
STRATEGIES=("default" "momentum-breakout" "grid-trading" "volatility-breakout" "bollinger-reversal")

# ÏµúÎåÄ ÎèôÏãú Ïã§Ìñâ Ïàò
MAX_PARALLEL=10

# ==========================================
# Î™®ÎìúÎ≥Ñ ÌååÎùºÎØ∏ÌÑ∞ Ï≤òÎ¶¨
# ==========================================

if [ "$MODE" = "backtest" ]; then
    # Î∞±ÌÖåÏä§Ìä∏ Î™®Îìú: preset, days, market ÏÑ§Ï†ï
    PRESET="${2:-default}"
    DAYS="${3:-30}"
    MARKET="${4:-}"

    # Preset Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if [[ ! " ${STRATEGIES[@]} " =~ " ${PRESET} " ]]; then
        echo "‚ùå ÏûòÎ™ªÎêú preset: $PRESET"
        echo "ÏÇ¨Ïö© Í∞ÄÎä•Ìïú preset: ${STRATEGIES[@]}"
        exit 1
    fi

    # ÎßàÏºì ÏÑ§Ï†ï
    if [ -n "$MARKET" ]; then
        MARKETS=("$MARKET")
    else
        MARKETS=("${DEFAULT_MARKETS[@]}")
    fi

elif [ "$MODE" = "compare" ]; then
    # ÎπÑÍµê Î™®Îìú: Î™®Îì† Ï†ÑÎûµ Ïã§Ìñâ
    DAYS="${2:-30}"
    MARKET="${3:-}"

    # ÎßàÏºì ÏÑ§Ï†ï
    if [ -n "$MARKET" ]; then
        MARKETS=("$MARKET")
    else
        MARKETS=("${DEFAULT_MARKETS[@]}")
    fi

elif [ "$MODE" = "live" ]; then
    # Ïã§Í±∞Îûò Î™®Îìú: preset, Í∏àÏï°, market ÏÑ§Ï†ï
    PRESET="${2:-default}"
    TRADE_AMOUNT="${3:-100000}"
    MARKET="${4:-}"

    # Preset Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    if [[ ! " ${STRATEGIES[@]} " =~ " ${PRESET} " ]]; then
        echo "‚ùå ÏûòÎ™ªÎêú preset: $PRESET"
        echo "ÏÇ¨Ïö© Í∞ÄÎä•Ìïú preset: ${STRATEGIES[@]}"
        exit 1
    fi

    # ÎßàÏºì ÏÑ§Ï†ï
    if [ -n "$MARKET" ]; then
        MARKETS=("$MARKET")
    else
        MARKETS=("${DEFAULT_MARKETS[@]}")
    fi

else
    echo "‚ùå ÏûòÎ™ªÎêú Î™®Îìú: $MODE"
    echo ""
    echo "ÏÇ¨Ïö©Î≤ï:"
    echo "  $0 backtest [preset] [days] [market]"
    echo "  $0 compare [days] [market]"
    echo "  $0 live [preset] [amount] [market]"
    echo ""
    echo "ÏòàÏãú:"
    echo "  $0 backtest bollinger-reversal 30 KRW-BTC  # Îã®Ïùº ÏΩîÏù∏"
    echo "  $0 backtest bollinger-reversal 30          # Î™®Îì† ÏΩîÏù∏"
    echo "  $0 compare 30"
    echo "  $0 live grid-trading 100000 KRW-BTC"
    exit 1
fi

# ==========================================
# Ìï®Ïàò
# ==========================================

# Î∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ìï®Ïàò
run_backtest() {
    local market=$1
    local preset=$2
    local days=$3

    # Î∞∞Ïπò Ïã§Ìñâ Î°úÍ∑∏Î•º ÎÇ†ÏßúÎ≥ÑÎ°ú Ï†ïÎ¶¨
    local date_path=$(date +%Y/%m/%d)
    local log_dir="batch_logs/${date_path}"
    mkdir -p "$log_dir"
    local log_file="${log_dir}/batch_${market}_${preset}_${days}d_$(date +%Y%m%d_%H%M%S).log"

    echo "üîÑ [Î∞±ÌÖåÏä§Ìä∏] $market - $preset (${days}Ïùº) ÏãúÏûë..."

    if [ "$preset" = "default" ]; then
        uv run scripts/run.py --backtest -m "$market" --days "$days" > "$log_file" 2>&1
    else
        uv run scripts/run.py --backtest -m "$market" -p "$preset" --days "$days" > "$log_file" 2>&1
    fi

    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ [Î∞±ÌÖåÏä§Ìä∏] $market - $preset (${days}Ïùº) ÏôÑÎ£å"

        # Í≤∞Í≥º ÏöîÏïΩ Ï∂îÏ∂ú
        local win_rate=$(grep "ÏäπÎ•†:" "$log_file" | awk '{print $2}' || echo "N/A")
        local profit=$(grep "ÏàòÏùµÎ•†:" "$log_file" | awk '{print $2}' || echo "N/A")
        local trades=$(grep "Í±∞Îûò:" "$log_file" | awk '{print $2}' | head -1 || echo "N/A")

        echo "   ÏäπÎ•†: $win_rate | ÏàòÏùµÎ•†: $profit | Í±∞Îûò: $trades"
    else
        echo "‚ùå [Î∞±ÌÖåÏä§Ìä∏] $market - $preset (${days}Ïùº) Ïã§Ìå® (ÏΩîÎìú: $exit_code)"
    fi

    return $exit_code
}

# Ïã§Í±∞Îûò Ïã§Ìñâ Ìï®Ïàò
run_live() {
    local market=$1
    local preset=$2
    local amount=$3

    echo "ü§ñ [Ïã§Í±∞Îûò] $market - $preset (‚Ç©${amount}) ÏãúÏûë..."
    echo "‚ö†Ô∏è  Ï£ºÏùò: Ïã§Ï†ú Í±∞ÎûòÍ∞Ä ÏãúÏûëÎê©ÎãàÎã§!"

    # Ïã§Í±∞ÎûòÎäî Ìè¨Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïã§Ìñâ (Ctrl+CÎ°ú Ï§ëÏßÄ Í∞ÄÎä•)
    if [ "$preset" = "default" ]; then
        uv run scripts/run.py --live -m "$market" -a "$amount"
    else
        uv run scripts/run.py --live -m "$market" -p "$preset" -a "$amount"
    fi

    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ [Ïã§Í±∞Îûò] $market Ï†ïÏÉÅ Ï¢ÖÎ£å"
    else
        echo "‚ùå [Ïã§Í±∞Îûò] $market ÎπÑÏ†ïÏÉÅ Ï¢ÖÎ£å (ÏΩîÎìú: $exit_code)"
    fi

    return $exit_code
}

# PID Î∞∞Ïó¥ÏóêÏÑú ÏôÑÎ£åÎêú ÏûëÏóÖ Ï≤¥ÌÅ¨
wait_for_slot() {
    while [ ${#PIDS[@]} -ge $MAX_PARALLEL ]; do
        for i in "${!PIDS[@]}"; do
            if ! kill -0 "${PIDS[$i]}" 2>/dev/null; then
                wait "${PIDS[$i]}" 2>/dev/null
                unset PIDS[$i]
            fi
        done
        PIDS=("${PIDS[@]}")  # Î∞∞Ïó¥ Ïû¨Ï†ïÎ†¨
        sleep 0.5
    done
}

# Ï†ÑÎûµ ÎπÑÍµê Í≤∞Í≥º ÏöîÏïΩ Ìï®Ïàò
print_comparison_summary() {
    local days=$1

    echo ""
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üìä Ï†ÑÎûµ ÎπÑÍµê Í≤∞Í≥º ÏöîÏïΩ (${days}Ïùº)"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""

    printf "%-25s | %-10s | %-12s | %-10s\n" "Ï†ÑÎûµ" "ÏäπÎ•†" "ÏàòÏùµÎ•†" "Í±∞Îûò ÌöüÏàò"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

    for strategy in "${STRATEGIES[@]}"; do
        # ÏµúÏã† Î°úÍ∑∏ ÌååÏùº Ï∞æÍ∏∞ (ÎÇ†ÏßúÎ≥Ñ ÎîîÎ†âÌÜ†Î¶¨ ÌÉêÏÉâ)
        local latest_log=$(find batch_logs -name "batch_*_${strategy}_${days}d_*.log" 2>/dev/null | sort -r | head -1)

        if [ -f "$latest_log" ]; then
            local win_rate=$(grep "ÏäπÎ•†:" "$latest_log" | awk '{print $2}' || echo "N/A")
            local profit=$(grep "ÏàòÏùµÎ•†:" "$latest_log" | awk '{print $2}' || echo "N/A")
            local trades=$(grep "Í±∞Îûò:" "$latest_log" | awk '{print $2}' | head -1 || echo "N/A")

            printf "%-25s | %-10s | %-12s | %-10s\n" "$strategy" "$win_rate" "$profit" "$trades"
        else
            printf "%-25s | %-10s | %-12s | %-10s\n" "$strategy" "N/A" "N/A" "N/A"
        fi
    done

    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo ""
}

# ==========================================
# Î©îÏù∏ Î°úÏßÅ
# ==========================================

# Î∞∞Ïπò Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± (ÎÇ†ÏßúÎ≥Ñ)
mkdir -p batch_logs/$(date +%Y/%m/%d)

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üöÄ Î∞∞Ïπò Ïã§ÌñâÍ∏∞"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "Î™®Îìú: $MODE"

if [ "$MODE" = "backtest" ]; then
    echo "Ï†ÑÎûµ: $PRESET"
    echo "Í∏∞Í∞Ñ: ${DAYS}Ïùº"
    echo "ÏΩîÏù∏: ${MARKETS[@]}"
    echo "Î≥ëÎ†¨ Ïã§Ìñâ: ÏµúÎåÄ $MAX_PARALLEL Í∞ú"
    echo ""

elif [ "$MODE" = "compare" ]; then
    echo "Ï†ÑÎûµ: Ï†ÑÏ≤¥ ÎπÑÍµê (${#STRATEGIES[@]}Í∞ú)"
    echo "Í∏∞Í∞Ñ: ${DAYS}Ïùº"
    echo "ÏΩîÏù∏: ${MARKETS[@]}"
    echo "Î≥ëÎ†¨ Ïã§Ìñâ: ÏµúÎåÄ $MAX_PARALLEL Í∞ú"
    echo ""

elif [ "$MODE" = "live" ]; then
    echo "Ï†ÑÎûµ: $PRESET"
    echo "ÏΩîÏù∏: ${MARKETS[@]}"
    echo "Í±∞Îûò Í∏àÏï°: ‚Ç©$TRADE_AMOUNT"
    echo "‚ö†Ô∏è  Ïã§Í±∞Îûò Î™®ÎìúÏûÖÎãàÎã§!"
    echo ""
    read -p "Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå? (yes/no): " confirm
    if [ "$confirm" != "yes" ]; then
        echo "Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§."
        exit 0
    fi
fi

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

# Î∞±ÌÖåÏä§Ìä∏/ÎπÑÍµê Î™®ÎìúÏù∏ Í≤ΩÏö∞ Í∏∞Ï°¥ Í≤∞Í≥º Ï†ïÎ¶¨ ÌôïÏù∏
if [ "$MODE" = "backtest" ] || [ "$MODE" = "compare" ]; then
    if [ -d "backtest_reports" ] && [ "$(ls -A backtest_reports 2>/dev/null)" ]; then
        echo "üóëÔ∏è  Í∏∞Ï°¥ Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï†ïÎ¶¨"
        echo ""
        ./scripts/clean.sh
        echo ""
    fi
fi

# ÏãúÏûë ÏãúÍ∞Ñ
START_TIME=$(date +%s)

# PID Î∞∞Ïó¥ (Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖ Í¥ÄÎ¶¨)
declare -a PIDS

# ==========================================
# Î∞±ÌÖåÏä§Ìä∏ Î™®Îìú
# ==========================================

if [ "$MODE" = "backtest" ]; then
    TOTAL_TASKS=${#MARKETS[@]}
    CURRENT_TASK=0

    echo "üìä Ï¥ù $TOTAL_TASKS Í∞ú Î∞±ÌÖåÏä§Ìä∏ ÏûëÏóÖ ÏãúÏûë ($PRESET)"
    echo ""

    for market in "${MARKETS[@]}"; do
        # ÎèôÏãú Ïã§Ìñâ Ïàò Ï†úÌïú
        wait_for_slot

        # Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ïã§Ìñâ
        run_backtest "$market" "$PRESET" "$DAYS" &
        PIDS+=($!)

        CURRENT_TASK=$((CURRENT_TASK + 1))
        echo "üìà ÏßÑÌñâ: $CURRENT_TASK/$TOTAL_TASKS"
        echo ""

        # ÏßßÏùÄ ÎåÄÍ∏∞ (API ÏöîÏ≤≠ Î∂ÑÏÇ∞)
        sleep 1
    done

    # Î™®Îì† ÏûëÏóÖ ÏôÑÎ£å ÎåÄÍ∏∞
    echo "‚è≥ ÎÇ®ÏùÄ ÏûëÏóÖ ÏôÑÎ£å ÎåÄÍ∏∞ Ï§ë..."
    for pid in "${PIDS[@]}"; do
        wait "$pid" 2>/dev/null || true
    done

# ==========================================
# Ï†ÑÎûµ ÎπÑÍµê Î™®Îìú
# ==========================================

elif [ "$MODE" = "compare" ]; then
    TOTAL_TASKS=$((${#MARKETS[@]} * ${#STRATEGIES[@]}))
    CURRENT_TASK=0

    echo "üìä Ï¥ù $TOTAL_TASKS Í∞ú Î∞±ÌÖåÏä§Ìä∏ ÏûëÏóÖ ÏãúÏûë (Ï†ÑÎûµ ÎπÑÍµê)"
    echo ""

    for market in "${MARKETS[@]}"; do
        for strategy in "${STRATEGIES[@]}"; do
            # ÎèôÏãú Ïã§Ìñâ Ïàò Ï†úÌïú
            wait_for_slot

            # Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ïã§Ìñâ
            run_backtest "$market" "$strategy" "$DAYS" &
            PIDS+=($!)

            CURRENT_TASK=$((CURRENT_TASK + 1))
            echo "üìà ÏßÑÌñâ: $CURRENT_TASK/$TOTAL_TASKS"
            echo ""

            # ÏßßÏùÄ ÎåÄÍ∏∞ (API ÏöîÏ≤≠ Î∂ÑÏÇ∞)
            sleep 2
        done
    done

    # Î™®Îì† ÏûëÏóÖ ÏôÑÎ£å ÎåÄÍ∏∞
    echo "‚è≥ ÎÇ®ÏùÄ ÏûëÏóÖ ÏôÑÎ£å ÎåÄÍ∏∞ Ï§ë..."
    for pid in "${PIDS[@]}"; do
        wait "$pid" 2>/dev/null || true
    done

    # ÎπÑÍµê Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•
    print_comparison_summary "$DAYS"

# ==========================================
# Ïã§Í±∞Îûò Î™®Îìú (ÏàúÏ∞® Ïã§Ìñâ)
# ==========================================

elif [ "$MODE" = "live" ]; then
    echo "‚ö†Ô∏è  Ïã§Í±∞ÎûòÎäî Ìïú Î≤àÏóê ÌïòÎÇòÏî© ÏàúÏ∞® Ïã§ÌñâÎê©ÎãàÎã§."
    echo "‚ö†Ô∏è  Ctrl+CÎ°ú ÌòÑÏû¨ Í±∞ÎûòÎ•º Ï§ëÏßÄÌï† Ïàò ÏûàÏäµÎãàÎã§."
    echo ""

    for market in "${MARKETS[@]}"; do
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "ü§ñ $market Ïã§Í±∞Îûò ÏãúÏûë ($PRESET)"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

        run_live "$market" "$PRESET" "$TRADE_AMOUNT"

        echo ""
        read -p "Îã§Ïùå ÏΩîÏù∏ÏúºÎ°ú ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå? (yes/no): " continue_trade
        if [ "$continue_trade" != "yes" ]; then
            echo "Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§."
            break
        fi
    done
fi

# ==========================================
# ÏôÑÎ£å ÏöîÏïΩ
# ==========================================

END_TIME=$(date +%s)
ELAPSED=$((END_TIME - START_TIME))
MINUTES=$((ELAPSED / 60))
SECONDS=$((ELAPSED % 60))

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "‚úÖ Î™®Îì† ÏûëÏóÖ ÏôÑÎ£å!"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ: ${MINUTES}Î∂Ñ ${SECONDS}Ï¥à"
echo ""

if [ "$MODE" = "backtest" ] || [ "$MODE" = "compare" ]; then
    echo "üìä Í≤∞Í≥º ÌôïÏù∏:"
    echo "  Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º: backtest_reports/{ÏΩîÏù∏}/{ÎÇ†Ïßú}/"
    echo "  Î∞∞Ïπò Î°úÍ∑∏: batch_logs/$(date +%Y/%m/%d)/"
    echo ""

    if [ "$MODE" = "compare" ]; then
        echo "üí° Tip:"
        echo "  Ï†ÑÎûµÎ≥Ñ ÏÉÅÏÑ∏ Í≤∞Í≥ºÎäî backtest_reports/{ÏΩîÏù∏}/$(date +%Y/%m/%d)/ ÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî"
        echo "  ÏµúÍ≥† ÏÑ±Í≥º Ï†ÑÎûµÏùÑ ÏÑ†ÌÉùÌïòÏó¨ Ïã§Ï†Ñ ÌÖåÏä§Ìä∏Î•º ÏßÑÌñâÌïòÏÑ∏Ïöî"
    fi
    echo ""
    echo "üìù Ï£ºÏöî ÌååÏùº:"
    echo "  - JSON: ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Î∂ÑÏÑùÏö©"
    echo "  - MD:   ÏùΩÍ∏∞ Ìé∏Ìïú Î¶¨Ìè¨Ìä∏"
    echo "  - CSV:  Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Î∂ÑÏÑùÏö©"
fi

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
